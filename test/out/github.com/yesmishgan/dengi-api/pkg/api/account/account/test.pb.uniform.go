// Code generated by protoc-gen-uniform. DO NOT EDIT.
// versions:
// 	protoc-gen-uniform: v0.0.1
// 	protoc:             v5.28.2
// source: test/test.proto

package account

import (
	context "context"
	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	runtime "github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	grpc "google.golang.org/grpc"
)

import _ "embed"

//go:embed test.swagger.json
var swaggerJSON []byte

// AccountServiceServiceDesc is description for the AccountServiceServer.
type AccountServiceServiceDesc struct {
	svc AccountServiceServer
	i   grpc.UnaryServerInterceptor
}

func NewAccountServiceServiceDesc(i AccountServiceServer) *AccountServiceServiceDesc {
	return &AccountServiceServiceDesc{svc: i}
}

func (d *AccountServiceServiceDesc) Swagger() []byte {
	return swaggerJSON
}

func (d *AccountServiceServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterAccountServiceServer(s, d.svc)
}

func (d *AccountServiceServiceDesc) RegisterGateway(ctx context.Context, mux *runtime.ServeMux) error {
	if d.i == nil {
		return RegisterAccountServiceHandlerServer(ctx, mux, d.svc)
	}
	return RegisterAccountServiceHandlerServer(ctx, mux, &proxyAccountServiceServer{
		AccountServiceServer: d.svc,
		interceptor:          d.i,
	})
}

// WithHTTPUnaryInterceptor adds GRPC Server Interceptor for HTTP gateway requests. Call again for multiple Interceptors.
func (d *AccountServiceServiceDesc) WithHTTPUnaryInterceptor(u grpc.UnaryServerInterceptor) {
	if d.i == nil {
		d.i = u
	} else {
		d.i = go_grpc_middleware.ChainUnaryServer(d.i, u)
	}
}

type proxyAccountServiceServer struct {
	AccountServiceServer
	interceptor grpc.UnaryServerInterceptor
}

func (p *proxyAccountServiceServer) AccountInfo(ctx context.Context, req *AccountInfoRequest) (*AccountInfoResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.AccountServiceServer,
		FullMethod: "/account.AccountService/AccountInfo",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return p.AccountServiceServer.AccountInfo(ctx, req.(*AccountInfoRequest))
	}
	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*AccountInfoResponse), nil
}

func (p *proxyAccountServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.AccountServiceServer,
		FullMethod: "/account.AccountService/Delete",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return p.AccountServiceServer.Delete(ctx, req.(*DeleteRequest))
	}
	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*DeleteResponse), nil
}

func (p *proxyAccountServiceServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.AccountServiceServer,
		FullMethod: "/account.AccountService/Create",
	}
	handler := func(ctx context.Context, req any) (any, error) {
		return p.AccountServiceServer.Create(ctx, req.(*CreateRequest))
	}
	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}
	return resp.(*CreateResponse), nil
}
